version: '3.8'

services:
  # Initialize directories and permissions
  airflow-init-dirs:
    image: apache/airflow:2.11.0
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/datasets
        chown -R 1000:0 /opt/airflow/logs /opt/airflow/dags /opt/airflow/datasets
        chmod -R 755 /opt/airflow/logs /opt/airflow/dags /opt/airflow/datasets
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./datasets:/opt/airflow/datasets
    user: "0:0"  # Run as root to set permissions

  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  airflow-init:
    image: apache/airflow:2.11.0
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init-dirs:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      _PIP_ADDITIONAL_REQUIREMENTS: 'dag-factory==1.0.0 apache-airflow-providers-postgres>=5.0.0 dlt[duckdb]>=0.4.0 duckdb>=0.9.0 pandas>=1.5.0 numpy>=1.24.0 sqlalchemy>=1.4.0'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./datasets:/opt/airflow/datasets
    user: "1000:0"
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db migrate
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com || echo "User already exists"

  airflow-webserver:
    image: apache/airflow:2.11.0
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      _PIP_ADDITIONAL_REQUIREMENTS: 'dag-factory==1.0.0 apache-airflow-providers-postgres>=5.0.0 dlt[duckdb]>=0.4.0 duckdb>=0.9.0 pandas>=1.5.0 numpy>=1.24.0 sqlalchemy>=1.4.0'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./datasets:/opt/airflow/datasets
    ports:
      - "8080:8080"
    command: webserver
    user: "1000:0"
    restart: always

  airflow-scheduler:
    image: apache/airflow:2.11.0
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'false'
      _PIP_ADDITIONAL_REQUIREMENTS: 'dag-factory==1.0.0 apache-airflow-providers-postgres>=5.0.0 dlt[duckdb]>=0.4.0 duckdb>=0.9.0 pandas>=1.5.0 numpy>=1.24.0 sqlalchemy>=1.4.0'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./datasets:/opt/airflow/datasets
    command: scheduler
    user: "1000:0"
    restart: always

volumes:
  postgres-db-volume:
